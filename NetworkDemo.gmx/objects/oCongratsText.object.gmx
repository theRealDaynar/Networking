<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>txtOutline=-1
txtColor=c_white
text1=""
scale=.001
for(i=0;i&lt;4;i++)
{
    tcolHue=205-205*i/4
    //hpA[i]=make_color_hsv(tcolHue,255,255)
    hpA[i]=make_color_hsv(255,255,tcolHue)
    s[i]=1
}
rainbow=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_play_sound_on(global.sEffects,sCongratsText,0,5)
draw_set_font(fLarge)
strWidth=0
strHeight=string_height(text1)
for(i=1;i&lt;string_length(text1)+1;i++){
var sChar = string_char_at(text1,i)
var letterinst = instance_create(x+strWidth-string_width(text1)/2+string_width(sChar)/2,y,oRainbowEffect);
letterinst.t = sChar
if rainbow=false{
letterinst.rainbow = false
    for(ii=0;ii&lt;4;ii++)
    {
        letterinst.hpA[ii]=make_color_hsv(color_get_hue(hpA[0]),global.tsat,global.tval)
    }
}
strWidth+=string_width(sChar)}
draw_set_font(font0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if rainbow=true{
    for(i=0;i&lt;4;i++)
    {
    tcolHue=color_get_value(hpA[i])
    tcolHue+=6*s[i]; if tcolHue&gt;205 {tcolHue=205; s[i]=-1}
    else if tcolHue &lt; 0{s[i]=1; tcolHue=0}
    hpA[i]=make_color_hsv(255,255,tcolHue)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_center)
draw_set_halign(fa_center)
draw_set_font(fLarge)
if txtOutline!=-1
{
    var tempcol = draw_get_color()
    draw_set_color(txtOutline)
/*draw_text_ext_transformed(x-1,y-1,text1,string_height(text1),room_width*2,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
draw_text_ext_transformed(x-1,y+1,text1,string_height(text1),room_width*2,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
draw_text_ext_transformed(x+1,y+1,text1,string_height(text1),room_width*2,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
draw_text_ext_transformed(x+1,y-1,text1,string_height(text1),room_width*2,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
}
draw_text_ext_transformed_colour(x,y,text1,string_height(text1),(1/scale)*(room_width-room_width/10),scale,scale,0,hpA[0],hpA[1],hpA[2],hpA[3],1)//4*(.25-scale))
//*/
draw_text_transformed(x-1,y-1,text1,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
draw_text_transformed(x-1,y+1,text1,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
draw_text_transformed(x+1,y+1,text1,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
draw_text_transformed(x+1,y-1,text1,scale,scale,0)//(1/scale)*(room_width-room_width/10),scale,scale,0)
}
draw_text_transformed_colour(x,y,text1,scale,scale,0,hpA[0],hpA[1],hpA[2],hpA[3],1)//4*(.25-scale))
if txtOutline!=-1
draw_set_color(tempcol)
draw_set_font(font0)
draw_set_valign(fa_top)
draw_set_halign(fa_left)
scale+=.01
if scale&gt;=1
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
