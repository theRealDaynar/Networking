<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the client
oMX=mouse_x
oMY=mouse_y
clientx = 64;   // player start X and Y
clienty = 192;
PlayerName=global.ServerName;   // get the name that was selected (it's a server OR player name)
PlayerChar=global.s
ClientPlayer=id

// Create a buffer for the network messages
buff = buffer_create(256, buffer_grow, 1);
// Create a TCP/IP socket
client = network_create_socket(global.ServerType);
// remember this socket ID so the server can ignore it (if we have a local server)
global.client = client;
// We're playing!!
global.NetworkState = NETWORK_PLAY;

// Create a list to hold ALL sprites sent from the server
allsprites = ds_list_create();
sprites = 0;

// Connect to our server
var err = network_connect(client, global.connectip, 6510);
if( err!=0 ){
    // if we can't connect, show and error and restart... could be more graceful :)
    show_message("Error - can not connect to server!!");
    game_restart();
}

// Client has connected to the server, so send our "player name"
SendName( PlayerName, PlayerChar );
alarm[0]=120;

global.chat=ds_list_create()
typing=false
global.ServerInstances=ds_list_create()
global.ClientInstances=ds_list_create()
global.instancetest=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send keep alive "ping" to server
SendKeepAlive();
alarm[0]=120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if oMX!=mouse_x or oMY!=mouse_y
{
    with(ClientPlayer)
    {
        aimX=mouse_x
        aimY=mouse_y
        if image_xscale=-1
            aimAngle=point_direction(aimX,aimY,x,y+23);
        else
            aimAngle=point_direction(x,y+23,aimX,aimY);
    }
    var mBuffer = buffer_create(1, buffer_grow, 1)
    buffer_write(mBuffer, buffer_s16, GUN_ANGLE_CMD );
    buffer_write(mBuffer, buffer_s16, mouse_x );
    buffer_write(mBuffer, buffer_s16, mouse_y );
    network_send_packet( client, mBuffer, buffer_get_size(mBuffer) );
    buffer_delete(mBuffer)
    oMX=mouse_x
    oMY=mouse_y    
}
if keyboard_check_released(ord("W")) or keyboard_check_released(vk_space)
SendKey(JUMP_KEY,0);
else if keyboard_check_pressed(ord("W")) or keyboard_check_pressed(vk_space)
SendKey(JUMP_KEY,1);
if keyboard_check_released(ord("A"))
SendKey(LEFT_KEY,0);
else if keyboard_check_pressed(ord("A"))
SendKey(LEFT_KEY,1);
if keyboard_check_released(ord("D"))
SendKey(RIGHT_KEY,0);
else if keyboard_check_pressed(ord("D"))
SendKey(RIGHT_KEY,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SendKey(MB_LEFT,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SendKey(MB_LEFT,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventid = ds_map_find_value(async_load, "id");

// Our socket?
if( client == eventid )
{
    switch(global.NetworkState)
    {
        case NETWORK_PLAY :
        {
            ClientRecievedData();
        }    
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left)
for(i=0;i&lt;ds_list_size(global.chat);i++;)
{
    draw_text(30,room_height-30-i*15,ds_list_find_value(global.chat,ds_list_size(global.chat)-(i+1)))
}
if typing=true
{
draw_text(30,room_height-15,keyboard_string)
}
draw_text(10,50,string(global.instancetest))
draw_set_halign(fa_center)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*/// Draw all sprites in level

// set the X and Y of the client so the room "follows" our player
x = clientx;
y = clienty;

// Now loop through all active sprites and draw them
var index = 0;
for(i=0;i&lt;sprites;i++){
    var xx,yy,sp,spindex, col;
    
    xx = ds_list_find_value(allsprites,index++);
    yy = ds_list_find_value(allsprites,index++);
    sp = ds_list_find_value(allsprites,index++);
    spindex = ds_list_find_value(allsprites,index++);
    col = ds_list_find_value(allsprites,index++);
    name = ds_list_find_value(allsprites,index++);

    draw_sprite_ext(sp,spindex,xx,yy,1,1,0,col,1.0);
    
    draw_set_color(c_white);
    draw_set_font(fName);
    draw_set_halign(fa_center);
    draw_text(xx+16,yy-20,name);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if typing=true{
typing=false
SendChatMessage(keyboard_string)
}else{
typing=true
keyboard_string=""}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
