<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create server and initialise map
global.counter = 0;
image_blend = c_red;
global.haveserver = true;

// List of random player colours....
ColourArray[0] = c_white;
ColourArray[1] = c_white;
ColourArray[2] = c_white;
ColourArray[3] = c_white;
ColourArray[4] = c_white;
ColourArray[5] = c_white;
ColourArray[6] = c_white;
ColourArray[7] = c_white;
ColourArray[8] = c_white;
ColourArray[9] = c_white;
ColourArray[10] = c_white;
ColourArray[11] = c_white;
ColourArray[12] = c_white;
ColourArray[13] = c_white;
ColourArray[14] = c_white;
ColourArray[15] = c_white;
colourindex = 0;

// Total number of players and baddies connected
global.PlayerTotal=0;
global.BaddieCount = 0;
global.BulletCount=0


// create our server. Server creation may fail if there is already a server running. If it does fail, delete eveything and kill this instance
broadcast_buffer = buffer_create(32, buffer_fixed, 1);
player_buffer = buffer_create(16384, buffer_fixed, 1);
Clients = ds_map_create();
socketlist = ds_list_create();

// Try and create the actual server
server = network_create_server(global.ServerType ,6510, 32 );
if( server&lt;0 ){    
    // If theres already a server running, shut down and delete.
    global.haveserver = false;
    ds_map_destroy(Clients);
    ds_list_destroy(socketlist);
    buffer_delete(broadcast_buffer);
    buffer_delete(player_buffer);
    instance_destroy();
}

// Setup a timer so we can broadcast the server IP out to local clients looking...
alarm[0]=60;
// Shotgun state to client
statesSent=0
alarm[1]=20
playing=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcast our location occasionally. Clients pick this up and can then display servers to the user. 

buffer_seek( broadcast_buffer, buffer_seek_start, 0 );
buffer_write( broadcast_buffer, buffer_string, global.ServerName );
network_send_broadcast( server, 6511, broadcast_buffer, buffer_tell(broadcast_buffer) );

// Broadcast once a second...
alarm[0]=60;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var count = ds_list_size(socketlist);
 
        var stateBuffer = buffer_create(1, buffer_grow, 1)
        buffer_write(stateBuffer, buffer_s16, -1)
        buffer_write(stateBuffer, buffer_u32, statesSent++)
        buffer_write(stateBuffer, buffer_u32, current_time)
        buffer_write(stateBuffer, buffer_u8, global.PlayerTotal)
        with(oPlayer)
        {
            if client = false
            {
                buffer_write(stateBuffer, buffer_u32, id)
                buffer_write(stateBuffer, buffer_u8, deaths)
                buffer_write(stateBuffer, buffer_s16, x)
                buffer_write(stateBuffer, buffer_s16, y)
                for(var i = 0;i &lt; 4;i++)
                {
                    buffer_write(stateBuffer, buffer_bool, keys[i])
                }
                buffer_write(stateBuffer, buffer_bool, ghost)
                buffer_write(stateBuffer, buffer_s16, aimX)
                buffer_write(stateBuffer, buffer_s16, aimY)
                buffer_write(stateBuffer, buffer_s8, grav)
                buffer_write(stateBuffer, buffer_s8, recoilSpeed)
                buffer_write(stateBuffer, buffer_s16, recoilDirection)
            }
        }
        buffer_write(stateBuffer, buffer_u8, global.BulletCount)
        with(oServerProjectile)
        {
            buffer_write(stateBuffer, buffer_s16, x)
            buffer_write(stateBuffer, buffer_s16, y)
            buffer_write(stateBuffer, buffer_s16, direction)
        }
        if( count&gt;0 )
        {
            for(i = 0;i &lt; count;i++)
            {
                network_send_packet( ds_list_find_value(socketlist,i), stateBuffer, buffer_get_size(stateBuffer));
            }
        }
buffer_delete(stateBuffer)
alarm[1]=20
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server network control
var eventid = ds_map_find_value(async_load, "id");

if( server == eventid ){
    // If the socket ID is the server one, then we have a new 
    /// client connecting, OR an old client disconnecting
    ConnectDisconnectClient();
}else if( eventid==global.client){
    // Do nothing if this is for our "local" client
}else{
    // All other sockets are connected client sockets, and we have recieved commands from them.
    ServerRecievedData();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display connected players, and number of baddies left.
draw_set_halign(fa_left);
draw_set_font(font0);
draw_set_color(c_red);
draw_text(10,10,"players: "+string(global.PlayerTotal) );
draw_text(10,30,"baddies: "+string(global.BaddieCount) );
draw_text(10,70,"fps: "+string(fps) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>startGame()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
