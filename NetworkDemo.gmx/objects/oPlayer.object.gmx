<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCharacters</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>Gator</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the player and map

image_speed = 0;
PlayerName="";

// 4 keys: left, right, jump, mbl (could be more)
for(var i=0;i&lt;4;i++){
    keys[i] = false;
}

// basic movement setup
xspeed = 2;
grav=2;
jump=0;
jumpPressed=false;
dir=0;   
client=false

//gun setup 
gun=gatgat          //sprite
aimAngle=0          //angle gun points at
aimX=x              //client mouse x
aimY=y              //client mouse y
inaccuracyArc=0     //level of inaccurancy +- in degrees
bulletNum=0         //number of bullets to fire at once
bulletString=0      //number of bullets in a string
bulletStringN=0     //counter variable for bulletString
bulletStringCD=0    //frames between each bullet in the string
bulletArc=0         //Arc in which to spread bullets in bulletNum
bulletSpd=5         //bullet speed
rof=0               //cooldown timer
rofcd=0             //actual ticker for cooldown timer
laser_sight=false   //display lazer sight
disableInput=false  //does shooting diable input
shooting=false      //Is it shooting
chargeUpTime=0      //time required before any shots can be fired
chargeUp=0          //ticker for chargeUpTime
recoil=0            //recoil amount STATIC defined by gun
recoilSpeed=0       //recoil speed used to actually move the player
recoilDirection=0   //direction recoiled

mx=0
my=0
ms=0
hp = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /// Process the player (move+collision)
var xx,yy,c1,c2;
if recoilSpeed&gt;0
{
    var hspd = lengthdir_x(recoilSpeed,recoilDirection)
    var vspd = lengthdir_y(recoilSpeed,recoilDirection)
        if hspd&lt;0
        {
            while(hspd&lt;0)
            {
                if hspd&gt;-1
                {
                    x -= hspd
                    hspd = 0
                }
                else
                {
                    x += 1
                    hspd += 1
                }
                c2 = -1;
                c1 = GetCollision(bbox_right,y);
                if( (y&amp;$1f)&gt;0 ) c2=GetCollision(bbox_right,y+32);
                if(  c1&gt;=0 ) || ( c2&gt;=0 )
                {
                    x = (x&amp;$ffffffe0) + 16;
                    break;
                }
            }
        }
        else
        {
            while(hspd&gt;0)
            {
                if hspd&lt;1
                {
                    x -= hspd
                    hspd = 0
                }
                else
                {
                    x -= 1
                    hspd -= 1
                }
                c2 = -1;
                c1 = GetCollision(bbox_left,y);
                if( (y&amp;$1f)&gt;0 ) c2=GetCollision(bbox_left,y+32);
                if(  c1&gt;=0 ) || ( c2&gt;=0 )
                {
                    x = (x&amp;$ffffffe0)+16;
                    break;
                }
            }
        }
        if vspd&lt;0
        {
            while(vspd&lt;0)
            {
                if vspd&gt;-1
                {
                    y += vspd
                    vspd = 0
                }
                else
                {
                    y -= 1
                    vspd += 1
                }
                c2 = -1;
                c1 = GetCollision(bbox_left,y);
                c2 = GetCollision(bbox_right,y);
                if( c1&gt;=0 || c2&gt;=0 )
                {
                    y = (y&amp;$ffffffe0)+32;
                    break;
                }
            }
        }
        else
        {
            while(vspd&gt;0)
            {
                if vspd&lt;1
                {
                    y += vspd
                    vspd = 0
                }
                else
                {
                    y += 1
                    vspd -= 1
                }
                c2 = -1;
                c1 = GetCollision(bbox_left,y+32);
                c2 = GetCollision(bbox_right,y+32);
                if( c1&gt;=0 || c2&gt;=0 )
                {
                    y = (y&amp;$ffffffe0);
                    break;
                }
            }
        }
    recoilSpeed-=.5
}
/// Do payer "jump"
if( jump &lt; 2 ) 
{
    if ((( keys[JUMP_KEY] ) and disableInput=false) or (shooting=false and keys[JUMP_KEY])){
        if jumpPressed=false{
            jumpPressed=true
            grav=-8;
            jump++;
        }
    }
    else
    jumpPressed=false
}



// Apply gravity (and jumping)
y = y+grav;
grav+=0.4;
if( grav&gt;=10 ) grav=10;

// If falling, check UNDER the player
if( grav&lt;0 )
{
    if( dir=1){
        image_xscale = 1;
    }else{
        image_xscale = -1;
    }
    c2 = -1;
    c1 = GetCollision(bbox_left,y);
    c2 = GetCollision(bbox_right,y);
    if( c1&gt;=0 || c2&gt;=0 )
    {
        grav=0;
        y = (y&amp;$ffffffe0)+32;
    }
}
else{
    // Otherwise, check above player
    if( jump &gt; 0)
    {
        if( dir=1){
            image_xscale = 1;
        }else{
            image_xscale = -1;
        }    
    }else{
        grav=0;
        jump++;
    }
    c2 = -1;
    c1 = GetCollision(bbox_left,y+32);
    c2 = GetCollision(bbox_right,y+32);
    if( c1&gt;=0 || c2&gt;=0 )
    {
        y = (y&amp;$ffffffe0);
        jump=0;
        
        if( dir=1){
            image_xscale = 1;
        }else{
            image_xscale = -1;
        }           
    }
}    




// If moving left, check LEFT collision
if(( keys[LEFT_KEY] ) and disableInput=false) or (shooting=false and keys[LEFT_KEY])
{
    dir=-1;
    x=x-xspeed;
    c2=-1;
    c1 = GetCollision(bbox_left,y);
    if( (y&amp;$1f)&gt;0 ) c2=GetCollision(bbox_left,y+32);
    if(  c1&gt;=0 ) || ( c2&gt;=0 )
    {
        x = (x&amp;$ffffffe0)+16;
    }    
}else if((keys[RIGHT_KEY] )and disableInput=false) or (shooting=false and keys[RIGHT_KEY])
{
    // Otherwise, check collision to the right
    dir=1;
    x=x+xspeed;
    c2 = -1;
    c1 = GetCollision(bbox_right,y);
    if( (y&amp;$1f)&gt;0 ) c2=GetCollision(bbox_right,y+32);
    if(  c1&gt;=0 ) || ( c2&gt;=0 )
    {
        x = (x&amp;$ffffffe0) + 16;
    }    
} else {
    // If standing still, don't animate
    //image_xscale = 1;
}
//if client=false{
    if (keys[MB_LEFT]=true or shooting=true) and rofcd&lt;=0
    {
        FireGun()
    }
    else if rofcd&gt;0
    {
        rofcd--
    }
    else if keys[MB_LEFT]=false
        chargeUp = 0
    
    if xprevious!=x or yprevious!=y
    {
            if image_xscale=-1
                aimAngle=point_direction(aimX,aimY,x,y+23);
            else
                aimAngle=point_direction(x,y+23,aimX,aimY);
        if client=false
        with(oServer)
        {
            var mBuffer = buffer_create(1, buffer_grow, 1)
            buffer_write(mBuffer, buffer_s16, GUN_ANGLE_CMD );
            buffer_write(mBuffer, buffer_s32, other.id );
            buffer_write(mBuffer, buffer_s16, other.aimAngle );
            var count = ds_list_size(socketlist);
            if( count&gt;0 )
            {
                for(i=0;i&lt;count;i++)
                { 
                    //network_send_packet( ds_list_find_value(socketlist,i),mBuffer, buffer_get_size(mBuffer));
                }
            }
            buffer_delete(mBuffer)
        }//*/
//    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if x&lt;0
{
x=room_width-1
y=yprevious
}
else if x&gt;room_width
{
x=1
y=yprevious
}
if y&lt;0
{
y=room_height-1
x=xprevious
}
else if y&gt;room_height
{
y=1
x=xprevious
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if client=true
{
    if ms &lt; 0
    {
        draw_self()
        if image_xscale = 1
            draw_sprite_ext(gun,0,x,y+23,1,1,aimAngle,c_white,1)
        else
            draw_sprite_ext(gun,0,x,y+23,-1,1,aimAngle,c_white,1)
    }
    else
    {
        draw_sprite_ext(sprite_index,image_index,mx + x,my + y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        if image_xscale = 1
            draw_sprite_ext(gun,0,mx + x,my + y + 23,1,1,aimAngle,c_white,1)
        else
            draw_sprite_ext(gun,0,mx + x,my + y + 23,-1,1,aimAngle,c_white,1)
        if distance_to_point(mx,my)&lt;=ms
            ms = 0
        var mdir = point_direction(mx + x,my + y,x,y);
        mx += lengthdir_x(ms,mdir)
        my += lengthdir_y(ms,mdir)
    }
    if laser_sight=true
    {
        DrawLaserSight()
    }
}
else
draw_rectangle_color(bbox_left,bbox_top,bbox_right,bbox_bottom,c_red,c_red,c_red,c_red,true)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
