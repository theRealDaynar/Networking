<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCharacters</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>Gator</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the player and map
CreateCollisionMap();

image_speed = 0;
PlayerName="";

// 4 keys: left, right, jump, mbl (could be more)
for(var i=0;i&lt;4;i++){
    keys[i] = false;
}

// basic movement setup
xspeed = 2;
grav=2;
jump=false;
dir=0;   
client=false

//gun setup 
gun=gatgat
aimAngle=0
aimX=x
aimY=y
inaccuracyArc=10
bulletNum=4
bulletString=5
bulletStringN=0
bulletArc=50
bulletSpd=5
rof=3/room_speed
rofcd=0
fire_gun=FireGatgat
laser_sight=true


hp = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /// Process the player (move+collision)
var xx,yy,c1,c2;

/// Do payer "jump"
if( !jump ) 
{
    if( keys[JUMP_KEY] ) {
        grav=-8;
        jump=true;
    }
}



// Apply gravity (and jumping)
y = y+grav;
grav+=0.4;
if( grav&gt;=10 ) grav=10;

// If falling, check UNDER the player
if( grav&lt;0 )
{
    if( dir=1){
        image_xscale = 1;
    }else{
        image_xscale = -1;
    }
    c2 = -1;
    c1 = GetCollision(bbox_left,y);
    c2 = GetCollision(bbox_right,y);
    if( c1&gt;=0 || c2&gt;=0 )
    {
        grav=0;
        y = (y&amp;$ffffffe0)+32;
    }
}
else{
    // Otherwise, check above player
    if( jump )
    {
        if( dir=1){
            image_xscale = 1;
        }else{
            image_xscale = -1;
        }    
    }else{
        grav=0;
        jump=true;
    }
    c2 = -1;
    c1 = GetCollision(bbox_left,y+32);
    c2 = GetCollision(bbox_right,y+32);
    if( c1&gt;=0 || c2&gt;=0 )
    {
        y = (y&amp;$ffffffe0);
        jump=0;
        
        if( dir=1){
            image_xscale = 1;
        }else{
            image_xscale = -1;
        }           
    }
}    




// If moving left, check LEFT collision
if( keys[LEFT_KEY] ) 
{
    dir=-1;
    if(!jump){
        image_xscale = -1;
    }
    x=x-xspeed;
    c2=-1;
    c1 = GetCollision(bbox_left,y);
    if( (y&amp;$1f)&gt;0 ) c2=GetCollision(bbox_left,y+32);
    if(  c1&gt;=0 ) || ( c2&gt;=0 )
    {
        x = (x&amp;$ffffffe0)+16;
    }    
}else if(keys[RIGHT_KEY] )
{
    // Otherwise, check collision to the right
    dir=1;
    if(!jump){
        image_xscale = 1;
    }
    x=x+xspeed;
    c2 = -1;
    c1 = GetCollision(bbox_right,y);
    if( (y&amp;$1f)&gt;0 ) c2=GetCollision(bbox_right,y+32);
    if(  c1&gt;=0 ) || ( c2&gt;=0 )
    {
        x = (x&amp;$ffffffe0) + 16;
    }    
} else {
    // If standing still, don't animate
    //image_xscale = 1;
}
if client=false{
    if keys[MB_LEFT]=true and rofcd&lt;=0
    {
        script_execute(fire_gun)
    }
    else if rofcd&gt;0
    {
        rofcd--
    }
    if xprevious!=x or yprevious!=y
    {
        if image_xscale=-1
        aimAngle=point_direction(aimX,aimY,x,y+23);
        else
        aimAngle=point_direction(x,y+23,aimX,aimY);
        with(oServer)
        {
            var mBuffer = buffer_create(1, buffer_grow, 1)
            buffer_write(mBuffer, buffer_s16, GUN_ANGLE_CMD );
            buffer_write(mBuffer, buffer_s32, other.id );
            buffer_write(mBuffer, buffer_s16, other.aimAngle );
            var count = ds_list_size(socketlist);
            if( count&gt;0 )
            {
                for(i=0;i&lt;count;i++)
                { 
                    network_send_packet( ds_list_find_value(socketlist,i),mBuffer, buffer_get_size(mBuffer));
                }
            }
            buffer_delete(mBuffer)
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if client=true
{
    draw_self()
    if image_xscale = 1
        draw_sprite_ext(gun,0,x,y+23,1,1,aimAngle,c_white,1)
    else
        draw_sprite_ext(gun,0,x,y+23,-1,1,aimAngle,c_white,1)
    if laser_sight=true
    {
            //27,1
            //9,8
        var tx =27-9
        var ty =1-8
        var tangle = radtodeg(arctan2(ty, tx))
        var th = sqrt(tx*tx+ty*ty)
        
        if image_xscale = 1
        {
            var lx = lengthdir_x(th,-tangle+aimAngle)
            var ly = lengthdir_y(th,-tangle+aimAngle)
            var desx = x-1+lx
            var desy = y+22+ly
            while(GetCollision(desx,desy)&lt;0 and (!collision_point(desx,desy,oPlayer,false,true) or collision_point(desx,desy,oPlayer,false,true).client=false))
            {
                desx += cos(-degtorad(aimAngle))
                desy += sin(-degtorad(aimAngle))
            }
        }
        else
        {
            var lx = lengthdir_x(th,tangle+aimAngle+180)
            var ly = lengthdir_y(th,tangle+aimAngle+180)
            var desx = x-1+lx
            var desy = y+22+ly
            while(GetCollision(desx,desy)&lt;0 and (!collision_point(desx,desy,oPlayer,false,true) or collision_point(desx,desy,oPlayer,false,true).client=false))
            {
                desx += cos(-degtorad(aimAngle+180))
                desy += sin(-degtorad(aimAngle+180))
            }
        }
        if GetCollision(x+1+lx,y+22+ly)&lt;0
            draw_line_colour(x-1 + lx,y+22 + ly,desx,desy,c_red,c_red)
    }
}
/*else
draw_rectangle_color(bbox_left,bbox_top,bbox_right,bbox_bottom,c_red,c_red,c_red,c_red,true)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
